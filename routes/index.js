var express = require('express');
var router = express.Router();

const tableList = [
  {'id':1, 'term': 'DevOps', 'description': 'DevOps is a set of practices that aim to enhance collaboration between software development (Dev) and IT operations (Ops) teams. It focuses on automating and streamlining the software development and deployment process and promoting a shared responsibility for the entire software delivery lifecycle, from development to deployment and maintenance.',
   'references': 'GitLab (2022) "What is DevOps?", accessed 23 July 2023 https://about.gitlab.com/topics/devops/. \n Atlassian (2016) "What is DevOps?", DevOps, Software Development, accessed 23 July 2023 https://www.atlassian.com/devops.'},
  {'id':2, 'term': 'Microservices', 'description': 'Microservices is an architectural approach where a large application is broken down into smaller, loosely coupled services. Each service serves a specific function and communicates with others through APIs. This architecture promotes agility, scalability, and easier maintenance.',
   'references': 'Google Cloud. (n.d.) "What Is Microservices Architecture?", accessed 23 July 2023 https://cloud.google.com/learn/what-is-microservices-architecture. \nJeremy H (3 July 2023) "REST APIs vs Microservices: Key Differences", accessed 23 July 2023 https://blog.dreamfactory.com/restful-api-and-microservices-the-differences-and-how-they-work-together/.'},
  {'id':3, 'term': 'Continuous Integration (CI)', 'description': 'Continuous Integration is a software development practice where code changes are automatically integrated into a shared repository frequently, preferably multiple times a day. It involves running automated tests to ensure that the new code does not break existing functionality and allows teams to identify and fix issues early in the development cycle.',
   'references': 'Coupland, M. (July 2021). "Chapter 1: Introducing DevOps and Agile - DevOps Adoption Strategies: Principles, Processes, Tools, and Trends", DevOps adoption strategies: principles, processes, tools, and trends, Packt Publishing, Birmingham, UK. https://learning.oreilly.com/library/view/devops-adoption-strategies/9781801076326/B17192_01_Final_ASB_ePub.xhtml#_idParaDest-25 \nPittet, S. (2019) "Continuous integration vs. continuous delivery vs. continuous deployment", Atlassian, accessed 23 July 2023 https://www.atlassian.com/continuous-delivery/principles/continuous-integration-vs-delivery-vs-deployment.'},
  {'id':4, 'term': 'Continuous Delivery (CD)', 'description': 'Continuous Delivery is an extension of continuous integration where code changes are automatically deployed to a production-like environment after passing through automated testing. The process ensures that the software can be released to production at any time, reducing the time between development and deployment.', 
  'references': 'Coupland, M. (July 2021). "Chapter 1: Introducing DevOps and Agile - DevOps Adoption Strategies: Principles, Processes, Tools, and Trends", DevOps adoption strategies: principles, processes, tools, and trends, Packt Publishing, Birmingham, UK. https://learning.oreilly.com/library/view/devops-adoption-strategies/9781801076326/B17192_01_Final_ASB_ePub.xhtml#_idParaDest-26 \nPittet, S. (2019) "Continuous integration vs. continuous delivery vs. continuous deployment", Atlassian, accessed 23 July 2023 https://www.atlassian.com/continuous-delivery/principles/continuous-integration-vs-delivery-vs-deployment.'},
  {'id':5, 'term': 'Continuous Deployment (CD): ', 'description': 'Continuous Deployment is an extension of Continuous Integration. While Continuous Integration focuses on automating code integration and testing, Continuous Deployment takes it a step further by automatically deploying code changes to production environments once they pass all the automated tests. In other words, Continuous Deployment ensures that every code change that successfully passes the automated tests is automatically released and made live in the production environment without any manual intervention. ', 
  'references': 'Coupland, M. (July 2021). ‘Chapter 1: Introducing DevOps and Agile - DevOps Adoption Strategies: Principles, Processes, Tools, and Trends’, DevOps adoption strategies: principles, processes, tools, and trends, Packt Publishing, Birmingham, UK. https://learning.oreilly.com/library/view/devops-adoption-strategies/9781801076326/B17192_01_Final_ASB_ePub.xhtml#_idParaDest-27 \nPittet, S. (2019) ‘Continuous integration vs. continuous delivery vs. continuous deployment’, Atlassian, accessed 23 July 2023 https://www.atlassian.com/continuous-delivery/principles/continuous-integration-vs-delivery-vs-deployment.'},
  {'id':6, 'term': 'Kanplan/ Scrumban', 'description': 'Kanplan, also known as Scrumban, is an Agile project management approach that combines principles and practices from Scrum and Kanban. It is a hybrid methodology that seeks to leverage the strengths of both Scrum and Kanban to improve the efficiency and flexibility of software development and project management processes.', 
  'references': 'Coupland, M. (July 2021). ‘Chapter 1: Introducing DevOps and Agile - DevOps Adoption Strategies: Principles, Processes, Tools, and Trends’, DevOps adoption strategies: principles, processes, tools, and trends, Packt Publishing, Birmingham, UK. https://learning.oreilly.com/library/view/devops-adoption-strategies/9781801076326/B17192_01_Final_ASB_ePub.xhtml#_idParaDest-35 \nProductPlaln. (n.d.) ‘Scrumban’, accessed 23 July 2023 https://www.productplan.com/glossary/scrumban/.'},
  {'id':7, 'term': 'Scaled Agile Framework (SAFe)', 'description': 'This is a comprehensive and widely-used framework for scaling Agile practices to large organizations and enterprises. It provides a set of principles, practices, and guidelines that help organizations implement and manage Agile methodologies across multiple teams, projects, and business units, ensuring alignment and coordination in the development and delivery of large-scale software and systems.', 
  'references': 'Piikkila, J. (2022) ‘What is SAFe?’, Atlassian, accessed 23 July 2023: https://www.atlassian.com/agile/agile-at-scale/what-is-safe. \nScaled Agile. (n.d.). ‘What is Safe: The Leading Framework For Business Agility’, accessed 23 July 2023 https://scaledagile.com/what-is-safe/.'},
  {'id':8, 'term': 'Test-Driven Development (TDD) and Behavior-Driven Development (BDD)', 'description': 'Test-Driven Development (TDD) is a software development approach where developers write automated test cases before writing the actual code. Behavior-Driven Development (BDD) extends the principles of Test-Driven Development (TDD) by focusing on improving collaboration between developers, testers, and non-technical stakeholders. BDD emphasizes communication and shared understanding of requirements through the use of a common domain-specific language.', 
  'references': 'Clinton, F. (2023) ‘TDD vs. BDD: Pros and Cons for Agile Development’, Medium, accessed 23 July 2023 https://medium.com/@realtalkdev/tdd-vs-bdd-pros-and-cons-for-agile-development-2e8e6f0e0e14 \nUnadkat, J. (15 June 2023) ‘TDD vs BDD vs ATDD : Key Differences’, BrowserStack, accessed 23 July 2023 https://www.browserstack.com/guide/tdd-vs-bdd-vs-atdd.'},
  {'id':9, 'term': 'Containerization', 'description': 'Containerization is a technology that allows applications to run in isolated environments called containers. Containers package the application code, runtime, system tools, and libraries, ensuring consistency across different environments and simplifying deployment. ', 
  'references': 'Alvarenga, G. (17 February 2023) ‘What is Containerization? Benefits, Use Cases, And How It Works’, CrowdStrike, accessed 23 July 2023 https://www.crowdstrike.com/cybersecurity-101/cloud-security/containerization/. \nAmazon Web Services, Inc. (n.d.). ‘What is Containerization?’, AWS, accessed 23 July 2023 https://aws.amazon.com/what-is/containerization/.'},
  {'id':10, 'term': 'Docker', 'description': 'Docker is a popular open-source containerization platform that enables developers to build, ship, and run applications in containers. Docker allows applications to run consistently and reliably across different environments, from development to testing and production.', 
  'references': 'Docker (2020) ‘Docker overview’ [online] Docker Documentation. accessed 23 July 2023 https://docs.docker.com/get-started/overview/.'},
  {'id':11, 'term': 'Configuration Management', 'description': 'This refers to the process of systematically managing and maintaining the configurations of software, hardware, or any other IT assets in an organized and controlled manner. It involves tracking changes, version control, and ensuring consistency and accuracy in the configuration of systems throughout their lifecycle. Configuration management helps in reducing errors, enhancing collaboration, and ensuring reliable and stable deployments in a DevOps environment.', 
  'references': 'Martin, M. (30 June 2023) Software Configuration Management in Software Engineering. [online] Guru99, accessed 5 August 2023. https://www.guru99.com/software-configuration-management-tutorial.html. \nSiddiqui, L. (22 June 2023) Configuration Management Explained: Benefits & Implementation Strategies. [online] Splunk-Blogs, accessed 5 August 2023. https://www.splunk.com/en_us/blog/learn/configuration-management.html'},
  {'id':12, 'term': 'Infrastructure as Code (IaC)', 'description': 'This is a practice in software development that involves managing and provisioning infrastructure resources through code and automation rather than manual processes. This means that instead of configuring servers and other infrastructure elements manually, IaC enables developers and operations teams to use code (usually in the form of declarative templates) to define and deploy infrastructure. IaC helps in achieving consistent and reproducible environments, reduces manual errors, and facilitates faster and more reliable deployments.', 
  'references': 'RedHat (11 May 2022) What is Infrastructure as Code (IaC)? [online], accessed 5 August 2023. https://www.redhat.com/en/topics/automation/what-is-infrastructure-as-code-iac. \nBigelow, S. J. (n.d.) infrastructure as code [online] TechTarget, accessed 5 August 2023. https://www.techtarget.com/searchitoperations/definition/Infrastructure-as-Code-IAC.'},
  {'id':13, 'term': 'Configuration as Code (CaC)', 'description': 'Configuration as Code extends the principles of Infrastructure as Code to the application and service configuration aspects. It involves managing and storing application configurations and settings in version-controlled files, similar to the way infrastructure is managed with IaC. This approach helps in maintaining consistent configurations across different environments and makes it easier to track and manage changes in application settings.', 
  'references': 'Bertram, A. (7 July 2021) Config as Code: What is it and how is it beneficial? [online] Octopus Deploy, accessed 5 August 2023. https://octopus.com/blog/config-as-code-what-is-it-how-is-it-beneficial. \nDas, T. (11 November 2022) Infrastructure-as-Code Vs Configuration Management: Key Differences. [online] Geekflare, accessed 5 August 2023. https://geekflare.com/infrastructure-as-code-vs-configuration-management/'},
  {'id':14, 'term': 'Deployment Pipeline', 'description': 'A Deployment Pipeline is an automated workflow that allows for the continuous delivery of software changes from development to production. It involves a series of stages (such as building, testing, and deploying) that software changes pass through in an automated fashion. The goal is to automate the entire process to ensure faster and more reliable software delivery.', 
  'references': 'PagerDuty. (n.d.) What is a Deployment Pipeline? [online], accessed 5 August 2023. https://www.pagerduty.com/resources/learn/what-is-a-deployment-pipeline/. \nMerron, D.  (13 May 2020) What is a Pipeline in Software Engineering? Intro to Deployment, CI, & CD Pipelines. [online] BMC Blogs, accessed 5 August 2023. https://www.bmc.com/blogs/deployment-pipeline/.'},
  {'id':15, 'term': 'Service Orchestration', 'description': 'Service orchestration is the process of automating and coordinating the deployment and management of various services, applications, and infrastructure components in a complex IT environment. It involves defining workflows, dependencies, and interactions among different services to ensure they work seamlessly together to achieve business objectives. Service orchestration is a key aspect of DevOps as it helps in streamlining processes and improving collaboration between development and operations teams.', 
  'references': 'www.redhat.com. (15 October 2019) What is orchestration? [online], accessed 5 August 2023. https://www.redhat.com/en/topics/automation/what-is-orchestration. \nSimsek, H. (30 June 2023) IT Automation vs. Orchestration: 5 Tips to Discover the Right Tool. [online] AIMultiple, accessed 5 August 2023. https://research.aimultiple.com/it-automation-vs-orchestration/'},
  {'id':16, 'term': 'Open Group Architecture Framework (TOGAF)', 'description': 'The Open Group Architecture Framework (TOGAF) is a widely used enterprise architecture methodology that provides a structured approach for designing, planning, implementing, and managing an organizations IT architecture. It offers a comprehensive set of guidelines, best practices, and tools to assist in the development and maintenance of enterprise architectures, ensuring alignment with business goals and strategies.', 
  'references': 'ScienceDirect (n.d.) The Open Group Architecture Framework - an overview | ScienceDirect Topics. [online], accessed 5 August 2023. https://www.sciencedirect.com/topics/computer-science/the-open-group-architecture-framework. \npubs.opengroup.org. (n.d.) The Open Group Architecture Framework Version 8.1.1. [online], accessed 5 August 2023. https://pubs.opengroup.org/architecture/togaf8-doc/arch/.'},
  {'id':17, 'term': 'DockeArchitecture Development Method (ADM)r', 'description': 'The Architecture Development Method (ADM) is a core component of the TOGAF framework. It is a step-by-step iterative process used to develop and evolve an enterprise architecture. ADM provides a set of guidelines and phases that enterprise architects follow to create and manage the architecture, starting from defining business goals to creating the final architecture and ensuring its continuous improvement.', 
  'references': 'vpadmin (26 January 2022. Introduction to TOGAF Architecture Development Method (ADM). [online] Cybermedian, accessed 5 August 2023. https://www.cybermedian.com/introduction-to-togaf-architecture-development-method-adm/. \nwww.opengroup.org. (n.d.) Introduction to the Architecture Development Method (ADM) [online], accessed 5 August 2023. http://www.opengroup.org/public/arch/p2/p2_intro.htm.'},
  {'id':18, 'term': 'Cross-Functional Autonomous', 'description': 'In the context of DevOps, cross-functional autonomous teams refer to self-organizing teams that consist of individuals with diverse skills and expertise necessary to handle end-to-end development, testing, and deployment of software. These teams have the authority and responsibility to make decisions and manage their work independently. Cross-functional autonomous teams promote collaboration, reduce dependencies, and lead to faster and more efficient software delivery.', 
  'references': 'pmateos (19 March 2019) Cross Functional Autonomous Teams - DevOps Principle #4. [online] Pufferfish Solutions, accessed 5 August 2023. https://www.pufferfish.solutions/post/cross-functional-autonomous-teams-devops-principle-4 \nKundu, A. (2 September 2018) Cross Functional Autonomous Teams with Technology at The Core - New Organizational Strategy (Part 3) [online] Medium, accessed 5 August 2023. https://medium.com/stretch-magazine/getting-started-with-digital-ehh-new-organizational-strategy-part-3-5efcbb700ad5'},
  {'id':9, 'term': 'Continuous Improvement', 'description': 'Continuous Improvement, often referred to as continuous improvement and continuous delivery (CI/CD), is a DevOps principle that emphasizes a culture of ongoing refinement and enhancement in the software development and delivery process. It involves the constant evaluation and optimization of workflows, tools, and practices to ensure that software is delivered quickly, reliably, and with high quality.', 
  'references': 'Janaspadana (19 January 2022) DevOps - A never-ending process of continual improvement. [online] LinkedIn, accessed 5 August 2023. https://www.linkedin.com/pulse/devops-never-ending-process-continual-/ \ndevops.talksplus (n.d.) Achieving Continuous Improvement Through DevOps | DevOps Talks. [online], accessed 5 August 2023. https://devops.talksplus.com/blog/achieving-continuous-improvement-through-devOps-5-steps-to-follow'},
  {'id':20, 'term': 'Mean Time to Recovery (MTTR)', 'description': 'Mean Time to Recovery (MTTR) is a metric used to measure the average time it takes to restore a system or service to full functionality after a failure or incident. In a DevOps context, reducing MTTR is a key objective as it signifies how quickly the development and operations teams can respond to and resolve issues, leading to improved system reliability and availability.', 
  'references': 'Fenton, S. (15 May 2023) How to measure DevOps mean time to recovery (MTTR). [online] Octopus Deploy, accessed 5 August 2023. https://octopus.com/blog/how-to-measure-mean-time-to-resolve \nSharif, A. (21 December 2022) Mean Time to Repair Explained [online], accessed 5 August 2023. https://www.crowdstrike.com/cybersecurity-101/observability/mean-time-to-repair-mttr/'}
  ];

/* GET home page. */
router.get('/', function(req, res, next) {
  res.render('index', { title: 'SIT722 DevOps Glossary', subhead: 'Welcome to my website showing a collection of DevOps terms and their brief descriptions.', table:tableList });
});

module.exports = router;
